import * as fs from 'fs';
import * as path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

/**
 * R√©sultat de validation
 */
export interface ValidationResult {
  success: boolean;
  errors: ValidationError[];
  warnings: ValidationWarning[];
  testResults?: TestResult;
  lintResults?: LintResult;
}

/**
 * Erreur de validation
 */
export interface ValidationError {
  type: 'syntax' | 'test' | 'lint' | 'build' | 'type';
  message: string;
  file?: string;
  line?: number;
  column?: number;
}

/**
 * Avertissement de validation
 */
export interface ValidationWarning {
  type: 'lint' | 'build' | 'type';
  message: string;
  file?: string;
  line?: number;
  column?: number;
}

/**
 * R√©sultat des tests
 */
export interface TestResult {
  passed: number;
  failed: number;
  skipped: number;
  total: number;
}

/**
 * R√©sultat du linting
 */
export interface LintResult {
  errorCount: number;
  warningCount: number;
  fixableErrorCount: number;
  fixableWarningCount: number;
}

/**
 * Options de validation
 */
export interface ValidationOptions {
  runTests?: boolean;
  runLint?: boolean;
  runTypecheck?: boolean;
  runBuild?: boolean;
  testCommand?: string;
  lintCommand?: string;
  typecheckCommand?: string;
  buildCommand?: string;
}

/**
 * Valide un projet pour s'assurer qu'il fonctionne correctement
 * @param projectDir R√©pertoire du projet
 * @param options Options de validation
 */
export async function validateProject(
  projectDir: string,
  options: ValidationOptions = {}
): Promise<ValidationResult> {
  const {
    runTests = true,
    runLint = true,
    runTypecheck = true,
    runBuild = true,
    testCommand = 'npm test',
    lintCommand = 'npm run lint',
    typecheckCommand = 'npm run typecheck',
    buildCommand = 'npm run build'
  } = options;

  const result: ValidationResult = {
    success: true,
    errors: [],
    warnings: []
  };

  // V√©rifier la syntaxe JavaScript/TypeScript des fichiers
  try {
    await validateSyntax(projectDir, result);
  } catch (error) {
    result.success = false;
    result.errors.push({
      type: 'syntax',
      message: error instanceof Error ? error.message : String(error)
    });
  }

  // V√©rifier si le projet contient un package.json
  const hasPackageJson = fs.existsSync(path.join(projectDir, 'package.json'));
  if (!hasPackageJson) {
    console.warn('‚ö†Ô∏è Aucun package.json trouv√©, certaines validations seront ignor√©es.');
    return result;
  }

  // Ex√©cuter le build du projet
  if (runBuild) {
    try {
      const packageJson = JSON.parse(fs.readFileSync(path.join(projectDir, 'package.json'), 'utf-8'));
      const hasBuildScript = packageJson.scripts && packageJson.scripts.build;

      if (hasBuildScript) {
        console.log('üîß Construction du projet...');
        await execCommand(buildCommand, projectDir);
        console.log('‚úÖ La construction du projet a r√©ussi.');
      } else {
        console.log('‚ÑπÔ∏è Aucun script de construction trouv√© dans package.json');
      }
    } catch (error) {
      result.success = false;
      result.errors.push({
        type: 'build',
        message: error instanceof Error ? error.message : String(error)
      });
      console.error('‚ùå √âchec de la construction du projet:', error);
    }
  }

  // Ex√©cuter les tests si configur√©s
  if (runTests) {
    try {
      const packageJson = JSON.parse(fs.readFileSync(path.join(projectDir, 'package.json'), 'utf-8'));
      const hasTestScript = packageJson.scripts && packageJson.scripts.test;

      if (hasTestScript) {
        console.log('üß™ Ex√©cution des tests...');
        await execCommand(testCommand, projectDir);
        console.log('‚úÖ Tous les tests sont pass√©s.');
      } else {
        console.log('‚ÑπÔ∏è Aucun script de test trouv√© dans package.json');
      }
    } catch (error) {
      result.success = false;
      result.errors.push({
        type: 'test',
        message: error instanceof Error ? error.message : String(error)
      });
      console.error('‚ùå Certains tests ont √©chou√©:', error);
    }
  }

  // Ex√©cuter le lint si configur√©
  if (runLint) {
    try {
      const packageJson = JSON.parse(fs.readFileSync(path.join(projectDir, 'package.json'), 'utf-8'));
      const hasLintScript = packageJson.scripts && packageJson.scripts.lint;

      if (hasLintScript) {
        console.log('üîç Ex√©cution du linting...');
        await execCommand(lintCommand, projectDir);
        console.log('‚úÖ Linting r√©ussi.');
      } else {
        console.log('‚ÑπÔ∏è Aucun script de lint trouv√© dans package.json');
      }
    } catch (error) {
      // Le lint peut √©chouer sans que cela soit critique
      result.warnings.push({
        type: 'lint',
        message: error instanceof Error ? error.message : String(error)
      });
      console.warn('‚ö†Ô∏è Des probl√®mes de linting ont √©t√© d√©tect√©s:', error);
    }
  }

  // Ex√©cuter la v√©rification des types si configur√©e
  if (runTypecheck) {
    try {
      const packageJson = JSON.parse(fs.readFileSync(path.join(projectDir, 'package.json'), 'utf-8'));
      const hasTypecheckScript = packageJson.scripts && packageJson.scripts.typecheck;

      if (hasTypecheckScript) {
        console.log('üîç V√©rification des types...');
        await execCommand(typecheckCommand, projectDir);
        console.log('‚úÖ V√©rification des types r√©ussie.');
      } else {
        console.log('‚ÑπÔ∏è Aucun script de v√©rification de types trouv√© dans package.json');
      }
    } catch (error) {
      result.success = false;
      result.errors.push({
        type: 'type',
        message: error instanceof Error ? error.message : String(error)
      });
      console.error('‚ùå Des erreurs de typage ont √©t√© d√©tect√©es:', error);
    }
  }

  return result;
}

/**
 * Valide la syntaxe des fichiers JavaScript et TypeScript
 */
async function validateSyntax(projectDir: string, result: ValidationResult): Promise<void> {
  // Impl√©mentation basique de validation de syntaxe
  const jsFiles = await findFiles(projectDir, ['.js', '.jsx', '.ts', '.tsx']);
  
  for (const file of jsFiles) {
    try {
      const content = fs.readFileSync(file, 'utf-8');
      // D√©tection basique d'erreurs de syntaxe JavaScript
      Function(`"use strict";${content}`);
    } catch (error) {
      result.success = false;
      result.errors.push({
        type: 'syntax',
        message: error instanceof Error ? error.message : String(error),
        file: path.relative(projectDir, file)
      });
    }
  }
}

/**
 * Valide les optimisations pour s'assurer qu'elles n'ont pas introduit de r√©gressions
 */
export async function validateOptimizations(
  projectDir: string,
  optimizationResults: any[],
  options: ValidationOptions = {}
): Promise<ValidationResult> {
  console.log('üß™ Validation des optimisations...');
  
  // Effectuer une validation compl√®te du projet
  const validationResult = await validateProject(projectDir, options);
  
  // Si la validation √©choue, analyser les r√©sultats pour voir s'ils sont li√©s aux optimisations
  if (!validationResult.success && optimizationResults.length > 0) {
    console.log('üîç Analyse des probl√®mes de validation en relation avec les optimisations...');
    
    // Filtrer les erreurs qui correspondent aux fichiers optimis√©s
    const optimizedFilePaths = optimizationResults.map((r: any) => r.filePath);
    
    const errorsInOptimizedFiles = validationResult.errors.filter(error => 
      error.file && optimizedFilePaths.some(filePath => 
        error.file && error.file.includes(path.basename(filePath)))
    );
    
    if (errorsInOptimizedFiles.length > 0) {
      console.warn(`‚ö†Ô∏è ${errorsInOptimizedFiles.length} erreurs d√©tect√©es dans les fichiers optimis√©s.`);
    } else {
      console.log('‚úÖ Aucune erreur d√©tect√©e dans les fichiers optimis√©s.');
    }
  }
  
  return validationResult;
}

/**
 * Ex√©cute une commande shell dans un r√©pertoire sp√©cifi√©
 */
async function execCommand(command: string, cwd: string): Promise<string> {
  try {
    const { stdout } = await execAsync(command, { cwd });
    return stdout.trim();
  } catch (error) {
    if (error instanceof Error) {
      throw new Error(`Erreur lors de l'ex√©cution de la commande '${command}': ${error.message}`);
    }
    throw error;
  }
}

/**
 * Trouve les fichiers avec les extensions sp√©cifi√©es
 */
async function findFiles(dir: string, extensions: string[]): Promise<string[]> {
  const result: string[] = [];
  
  function traverseDir(currentDir: string) {
    const files = fs.readdirSync(currentDir);
    
    for (const file of files) {
      const filePath = path.join(currentDir, file);
      const stat = fs.statSync(filePath);
      
      if (stat.isDirectory() && !file.startsWith('node_modules') && !file.startsWith('.git')) {
        traverseDir(filePath);
      } else if (stat.isFile() && extensions.some(ext => file.endsWith(ext))) {
        result.push(filePath);
      }
    }
  }
  
  traverseDir(dir);
  return result;
}
