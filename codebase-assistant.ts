import * as readline from 'readline';
import { codeScanner } from './tools/code-scanner';
import { testGenerator } from './tools/test-generator';
import { DependencyAnalyzer } from './tools/dependency-analyzer';
import { codeRefactorer } from './tools/code-refactorer';
import { documentationUpdater } from './tools/documentation-updater';
import { performanceAnalyzer } from './tools/performanceAnalyzer';
import { complianceChecker } from './tools/compliance-checker';

// Interface pour standardiser le r√©sultat des actions
interface ActionResult {
  success: boolean;
  summary: string;
  details: string[];
  metrics?: Record<string, any>;
}

/**
 * Menu principal d'actions pour l'optimisation de la codebase
 */
async function showMainMenu(): Promise<void> {
  console.clear();
  console.log('üõ†Ô∏è  Assistant d\'Optimisation Bolt2Bolt üõ†Ô∏è\n');
  console.log('S√©lectionnez une action:');
  console.log('1Ô∏è‚É£  Scanner et stabiliser la codebase actuelle');
  console.log('2Ô∏è‚É£  G√©n√©rer & ex√©cuter des tests unitaires intelligents');
  console.log('3Ô∏è‚É£  Analyser et optimiser les d√©pendances du projet');
  console.log('4Ô∏è‚É£  Refactoriser les parties du code jug√©es complexes');
  console.log('5Ô∏è‚É£  Mettre √† jour la documentation sans ajout de nouveaux fichiers');
  console.log('6Ô∏è‚É£  Analyser et proposer des am√©liorations sur les performances');
  console.log('7Ô∏è‚É£  V√©rifier la conformit√© aux standards TypeScript & s√©curit√©');
  console.log('0Ô∏è‚É£  Quitter');

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question('\nVotre choix (0-7): ', async (choice) => {
    rl.close();
    
    let result: ActionResult | null = null;
    
    switch (choice) {
      case '1':
        console.log('\nüîç Scanner et stabiliser la codebase...');
        result = await codeScanner.scan();
        break;
      case '2':
        console.log('\nüß™ G√©n√©ration et ex√©cution des tests unitaires...');
        // Prompt: Instruct the AI to analyze existing code and generate comprehensive unit tests.
        injectPrompt('TEST_GENERATION_INIT', 'Analyze the codebase to generate effective and comprehensive unit tests, covering various scenarios and edge cases. Prioritize testing critical functionalities and complex logic.');
        result = await testGenerator.generateAndRun();
        // Prompt: Instruct the AI to engrange the tests generated
        injectPrompt('TEST_GENERATION_STORE', 'Store the generated tests in a structured manner, making them easily accessible and maintainable for future use.');
        break;
      case '3':
        console.log('\nüì¶ Analyse des d√©pendances...');
        result = await dependencyAnalyzer.analyze();
        break;
      case '4':
        console.log('\nüîÑ Refactorisation du code complexe...');
        result = await codeRefactorer.refactor();
        break;
      case '5':
        console.log('\nüìù Mise √† jour de la documentation...');
        result = await documentationUpdater.update();
        break;
      case '6':
        console.log('\n‚ö° Analyse des performances...');
        result = await performanceAnalyzer.analyze();
        break;
      case '7':
        console.log('\n‚úÖ V√©rification de la conformit√© et de la s√©curit√©...');
        result = await complianceChecker.check();
        break;
      case '0':
        console.log('\nAu revoir!');
        return;
      default:
        console.log('\n‚ùå Choix invalide. Veuillez r√©essayer.');
        await new Promise(resolve => setTimeout(resolve, 1500));
        return showMainMenu();
    }
    
    if (result) {
      displayResult(result);
    }
    
    // Retour au menu apr√®s affichage des r√©sultats
    rl.question('\nAppuyez sur Entr√©e pour revenir au menu principal...', () => {
      rl.close();
      showMainMenu();
    });
  });
}

/**
 * Affiche les r√©sultats d'une action de mani√®re format√©e
 */
function displayResult(result: ActionResult): void {
  console.clear();
  console.log(`\nüõ† R√©sultat de l'action: ${result.success ? '‚úÖ Succ√®s' : '‚ùå √âchec'}\n`);
  
  console.log('üìä R√©sum√©:');
  console.log(result.summary);
  
  console.log('\nüìã D√©tails:');
  result.details.forEach(detail => console.log(`‚Ä¢ ${detail}`));
  
  if (result.metrics) {
    console.log('\nüìà M√©triques:');
    Object.entries(result.metrics).forEach(([key, value]) => {
      console.log(`‚Ä¢ ${key}: ${value}`);
    });
  }
}

// Point d'entr√©e de l'application
(async () => {
  await showMainMenu();
})();
